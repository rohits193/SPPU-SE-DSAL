/*Consider telephone book database of N clients. Make use of a hash table implementation to quickly look up clientâ€˜s telephone number. Make use of two collision handling techniques and compare them using number of comparisons required to find a set of telephone numbers*/

#include <iostream>
#include <vector>
#include <list>
using namespace std;

const int SIZE = 10; // hash table size

// Linear Probing Class
class LinearProbing {
    int table[SIZE];
    int comparisons;

public:
    LinearProbing() {
        for (int i = 0; i < SIZE; i++)
            table[i] = -1; // -1 indicates empty
        comparisons = 0;
    }

    int hashFunction(int key) {
        return key % SIZE;
    }

    void insert(int key) {
        int index = hashFunction(key);
        int i = 0;
        while (table[(index + i) % SIZE] != -1) {
            i++;
        }
        table[(index + i) % SIZE] = key;
    }

    bool search(int key) {
        comparisons = 0;
        int index = hashFunction(key);
        int i = 0;
        while (table[(index + i) % SIZE] != -1 && comparisons < SIZE) {
            comparisons++;
            if (table[(index + i) % SIZE] == key)
                return true;
            i++;
        }
        return false;
    }

    int getComparisons() {
        return comparisons;
    }

    void display() {
        cout << "\n[Linear Probing Table]\n";
        for (int i = 0; i < SIZE; i++) {
            cout << i << " -> ";
            if (table[i] != -1)
                cout << table[i];
            else
                cout << "null";
            cout << endl;
        }
    }
};

// Chaining Class
class Chaining {
    list<int> table[SIZE];
    int comparisons;

public:
    Chaining() {
        comparisons = 0;
    }

    int hashFunction(int key) {
        return key % SIZE;
    }

    void insert(int key) {
        int index = hashFunction(key);
        table[index].push_back(key);
    }

    bool search(int key) {
        comparisons = 0;
        int index = hashFunction(key);
        for (int value : table[index]) {
            comparisons++;
            if (value == key)
                return true;
        }
        return false;
    }

    int getComparisons() {
        return comparisons;
    }

    void display() {
        cout << "\n[Chaining Table]\n";
        for (int i = 0; i < SIZE; i++) {
            cout << i << " -> ";
            for (int val : table[i])
                cout << val << " -> ";
            cout << "null\n";
        }
    }
};

// Main function to demonstrate and compare
int main() {
    LinearProbing lp;
    Chaining ch;

    vector<int> phoneNumbers = {12345, 54321, 23456, 34567, 45678, 67890, 78901};

    // Insert into both hash tables
    for (int number : phoneNumbers) {
        lp.insert(number);
        ch.insert(number);
    }

    lp.display();
    ch.display();

    cout << "\n[Search Comparisons]\n";
    for (int number : phoneNumbers) {
        lp.search(number);
        ch.search(number);
        cout << "Phone: " << number
             << " | LP Comparisons: " << lp.getComparisons()
             << " | Chaining Comparisons: " << ch.getComparisons() << endl;
    }

    // Try searching a missing number
    int missing = 99999;
    lp.search(missing);
    ch.search(missing);
    cout << "\nSearch for missing number (" << missing << "):\n";
    cout << "LP Comparisons: " << lp.getComparisons() << endl;
    cout << "Chaining Comparisons: " << ch.getComparisons() << endl;

    return 0;
}

/*                                                      OUTPUT

[Linear Probing Table]
0 -> null
1 -> 12345
2 -> 23456
...
[Chaining Table]
0 -> null
1 -> 12345 -> null
2 -> 23456 -> null
...

[Search Comparisons]
Phone: 12345 | LP Comparisons: 1 | Chaining Comparisons: 1
Phone: 67890 | LP Comparisons: 1 | Chaining Comparisons: 1

Search for missing number (99999):
LP Comparisons: 10
Chaining Comparisons: 0 */
